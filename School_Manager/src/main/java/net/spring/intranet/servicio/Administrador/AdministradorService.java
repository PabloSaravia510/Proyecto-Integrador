
package net.spring.intranet.servicio.Administrador;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "AdministradorService", targetNamespace = "http://service.intranet.spring.net", wsdlLocation = "http://localhost:8080/School_Servidor/services/AdministradorService?wsdl")
public class AdministradorService
    extends Service
{

    private final static URL ADMINISTRADORSERVICE_WSDL_LOCATION;
    private final static WebServiceException ADMINISTRADORSERVICE_EXCEPTION;
    private final static QName ADMINISTRADORSERVICE_QNAME = new QName("http://service.intranet.spring.net", "AdministradorService");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL("http://localhost:8080/School_Servidor/services/AdministradorService?wsdl");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        ADMINISTRADORSERVICE_WSDL_LOCATION = url;
        ADMINISTRADORSERVICE_EXCEPTION = e;
    }

    public AdministradorService() {
        super(__getWsdlLocation(), ADMINISTRADORSERVICE_QNAME);
    }

    public AdministradorService(WebServiceFeature... features) {
        super(__getWsdlLocation(), ADMINISTRADORSERVICE_QNAME, features);
    }

    public AdministradorService(URL wsdlLocation) {
        super(wsdlLocation, ADMINISTRADORSERVICE_QNAME);
    }

    public AdministradorService(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, ADMINISTRADORSERVICE_QNAME, features);
    }

    public AdministradorService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public AdministradorService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns AdministradorServicePortType
     */
    @WebEndpoint(name = "AdministradorServiceHttpSoap11Endpoint")
    public AdministradorServicePortType getAdministradorServiceHttpSoap11Endpoint() {
        return super.getPort(new QName("http://service.intranet.spring.net", "AdministradorServiceHttpSoap11Endpoint"), AdministradorServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns AdministradorServicePortType
     */
    @WebEndpoint(name = "AdministradorServiceHttpSoap11Endpoint")
    public AdministradorServicePortType getAdministradorServiceHttpSoap11Endpoint(WebServiceFeature... features) {
        return super.getPort(new QName("http://service.intranet.spring.net", "AdministradorServiceHttpSoap11Endpoint"), AdministradorServicePortType.class, features);
    }

    /**
     * 
     * @return
     *     returns AdministradorServicePortType
     */
    @WebEndpoint(name = "AdministradorServiceHttpSoap12Endpoint")
    public AdministradorServicePortType getAdministradorServiceHttpSoap12Endpoint() {
        return super.getPort(new QName("http://service.intranet.spring.net", "AdministradorServiceHttpSoap12Endpoint"), AdministradorServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns AdministradorServicePortType
     */
    @WebEndpoint(name = "AdministradorServiceHttpSoap12Endpoint")
    public AdministradorServicePortType getAdministradorServiceHttpSoap12Endpoint(WebServiceFeature... features) {
        return super.getPort(new QName("http://service.intranet.spring.net", "AdministradorServiceHttpSoap12Endpoint"), AdministradorServicePortType.class, features);
    }

    /**
     * 
     * @return
     *     returns AdministradorServicePortType
     */
    @WebEndpoint(name = "AdministradorServiceHttpEndpoint")
    public AdministradorServicePortType getAdministradorServiceHttpEndpoint() {
        return super.getPort(new QName("http://service.intranet.spring.net", "AdministradorServiceHttpEndpoint"), AdministradorServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns AdministradorServicePortType
     */
    @WebEndpoint(name = "AdministradorServiceHttpEndpoint")
    public AdministradorServicePortType getAdministradorServiceHttpEndpoint(WebServiceFeature... features) {
        return super.getPort(new QName("http://service.intranet.spring.net", "AdministradorServiceHttpEndpoint"), AdministradorServicePortType.class, features);
    }

    private static URL __getWsdlLocation() {
        if (ADMINISTRADORSERVICE_EXCEPTION!= null) {
            throw ADMINISTRADORSERVICE_EXCEPTION;
        }
        return ADMINISTRADORSERVICE_WSDL_LOCATION;
    }

}
